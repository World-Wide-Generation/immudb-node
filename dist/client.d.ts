import * as empty from 'google-protobuf/google/protobuf/empty_pb';
import * as messages from './proto/schema_pb';
import * as services from './proto/schema_grpc_pb';
import { Config } from './interfaces';
import Util from './util';
import Proofs from './proofs';
import State from './state';
declare class ImmudbClient {
    util: Util;
    proofs: Proofs;
    state: State;
    client: services.ImmuServiceClient;
    private static instance;
    private _auth;
    private _token;
    private _metadata;
    private _activeDatabase;
    private _serverUUID;
    private _serverVersion;
    private constructor();
    static getInstance(config: Config): Promise<ImmudbClient>;
    initClient(user?: string, password?: string, databasename?: string, autoLogin?: boolean, autoDatabase?: boolean): Promise<void>;
    shutdown(): Promise<void>;
    login(params: messages.LoginRequest.AsObject): Promise<messages.LoginResponse.AsObject | undefined>;
    createDatabase(params: messages.Database.AsObject): Promise<empty.Empty | undefined>;
    useDatabase(params: messages.Database.AsObject): Promise<messages.UseDatabaseReply.AsObject | undefined>;
    set(params: messages.KeyValue.AsObject): Promise<messages.TxMetadata.AsObject | undefined>;
    get(params: messages.Key.AsObject): Promise<messages.Entry.AsObject | undefined>;
    listDatabases(): Promise<messages.DatabaseListResponse.AsObject | undefined>;
    changePermission(params: messages.ChangePermissionRequest.AsObject): Promise<empty.Empty | undefined>;
    listUsers(): Promise<messages.UserList.AsObject | undefined>;
    createUser(params: messages.CreateUserRequest.AsObject): Promise<empty.Empty | undefined>;
    changePassword(params: messages.ChangePasswordRequest.AsObject): Promise<empty.Empty | undefined>;
    logout(): Promise<empty.Empty | undefined>;
    setActiveUser(params: messages.SetActiveUserRequest.AsObject): Promise<empty.Empty | undefined>;
    healthCheck(): Promise<messages.HealthResponse.AsObject | undefined>;
    count(params: messages.KeyPrefix.AsObject): Promise<messages.EntryCount.AsObject | undefined>;
    countAll(params: messages.KeyPrefix.AsObject): Promise<messages.EntryCount.AsObject | undefined>;
    scan(params: messages.ScanRequest.AsObject): Promise<messages.Entries.AsObject | undefined>;
    history({ key, offset, limit, desc, sincetx }: messages.HistoryRequest.AsObject): Promise<messages.Entries.AsObject | undefined>;
    zScan({ set, seekkey, seekscore, seekattx, inclusiveseek, limit, desc, sincetx, nowait }: messages.ZScanRequest.AsObject): Promise<messages.ZEntries.AsObject | undefined>;
    currentState(): Promise<messages.ImmutableState.AsObject | undefined>;
    currentRoot(): Promise<messages.ImmutableState.AsObject | undefined>;
    zAdd(params: messages.ZEntry.AsObject): Promise<messages.TxMetadata.AsObject | undefined>;
    zAddAt({ set, score, key, attx }: messages.ZEntry.AsObject): Promise<messages.TxMetadata.AsObject | undefined>;
    setReference(params: messages.Entry.AsObject): Promise<messages.TxMetadata.AsObject | undefined>;
    setReferenceAt(): Promise<void>;
    verifiedSetReference(): Promise<void>;
    verifiedSetReferenceAt(): Promise<void>;
    setAll(): Promise<void>;
    execAll(): Promise<void>;
    getAll({ keysList, sincetx }: messages.KeyListRequest.AsObject): Promise<messages.Entries.AsObject | undefined>;
    updateAuthConfig(params: messages.AuthConfig.AsObject): Promise<empty.Empty | undefined>;
    updateMTLSConfig(params: messages.MTLSConfig.AsObject): Promise<empty.Empty | undefined>;
    txById(params: messages.TxRequest.AsObject): Promise<messages.Tx.AsObject | undefined>;
    setupDialOptions(): Promise<void>;
}
export default ImmudbClient;
