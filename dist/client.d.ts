import 'dotenv/config';
import * as messages from './proto/schema_pb';
import * as empty from 'google-protobuf/google/protobuf/empty_pb';
import { Config } from './interfaces';
import Util from './util';
import Proofs from './proofs';
import Root from './root';
import * as types from './interfaces';
declare class ImmudbClient {
    util: Util;
    proofs: Proofs;
    root: Root;
    client: any;
    private _auth;
    private _token;
    private _metadata;
    private _activeDatabase;
    private _serverUUID;
    private _serverVersion;
    constructor(config: Config);
    shutdown(): Promise<void>;
    login(params: messages.LoginRequest.AsObject): Promise<messages.LoginResponse | empty.Empty>;
    createDatabase(params: messages.Database.AsObject): Promise<empty.Empty>;
    useDatabase(params: messages.Database.AsObject): Promise<messages.UseDatabaseReply | empty.Empty>;
    set(params: messages.KeyValue.AsObject): Promise<messages.Index | empty.Empty>;
    get(params: messages.Key.AsObject): Promise<messages.Index | empty.Empty>;
    listDatabases(): Promise<messages.DatabaseListResponse | empty.Empty>;
    changePermission(params: messages.ChangePermissionRequest.AsObject): Promise<empty.Empty>;
    listUsers(): Promise<messages.UserList | empty.Empty>;
    createUser(params: messages.CreateUserRequest.AsObject): Promise<empty.Empty>;
    changePassword(params: messages.ChangePasswordRequest.AsObject): Promise<empty.Empty>;
    logout(): Promise<empty.Empty>;
    setActiveUser(params: messages.SetActiveUserRequest.AsObject): Promise<empty.Empty>;
    printTree(): Promise<messages.Tree | empty.Empty>;
    health(): Promise<messages.HealthResponse | empty.Empty>;
    count(params: messages.KeyPrefix.AsObject): Promise<messages.ItemsCount | empty.Empty>;
    scan(params: messages.ScanOptions.AsObject): Promise<messages.ItemList | empty.Empty>;
    byIndex(params: messages.Index.AsObject): Promise<messages.Item | empty.Empty>;
    history(params: messages.HistoryOptions.AsObject): Promise<messages.ItemList | empty.Empty>;
    zScan(params: messages.ZScanOptions.AsObject): Promise<messages.Index | empty.Empty>;
    iScan(params: messages.IScanOptions.AsObject): Promise<messages.Page | empty.Empty>;
    currentRoot(): Promise<messages.Root | empty.Empty>;
    zAdd(params: types.SimpleZAddOptions.AsObject): Promise<messages.Index | empty.Empty>;
    reference(params: messages.ReferenceOptions.AsObject): Promise<messages.Index | empty.Empty>;
    setBatch(params: messages.KVList.AsObject): Promise<messages.Index | empty.Empty>;
    getBatch(params: messages.KeyList.AsObject): Promise<messages.ItemList | empty.Empty>;
    safeSet(params: messages.KeyValue.AsObject): Promise<messages.Proof | empty.Empty>;
    safeGet(params: messages.Key.AsObject): Promise<messages.SafeItem | empty.Empty>;
    updateAuthConfig(params: messages.AuthConfig.AsObject): Promise<empty.Empty>;
    updateMTLSConfig(params: messages.MTLSConfig.AsObject): Promise<empty.Empty>;
    safeZAdd(params: types.SimpleZAddOptions.AsObject): Promise<messages.Proof | empty.Empty>;
    inclusion(params: messages.Index.AsObject): Promise<messages.InclusionProof | empty.Empty>;
    consistency(params: messages.Index.AsObject): Promise<messages.ConsistencyProof | empty.Empty>;
    bySafeIndex(params: messages.Index.AsObject): Promise<messages.SafeItem | empty.Empty>;
}
export default ImmudbClient;
